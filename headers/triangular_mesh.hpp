#ifndef TRIANGULAR_MESH_HPP
#define TRIANGULAR_MESH_HPP

#include "config.hpp"
#include "point.hpp"

#include <vector>

class Triangle;



/**
 * Unstructured triangular (2D simplicial) mesh.
 */
class TriangularMesh
{
public:

  TriangularMesh();

  ~TriangularMesh();

  void clear();

  /**
   * Read the existing mesh generated by Gmsh from a .msh file.
   * @param meshfile - a name of the file with the mesh
   */
  void read_msh(const std::string &meshfile);



private:

  TriangularMesh(const TriangularMesh&);
  TriangularMesh& operator =(const TriangularMesh &);

  /**
   * Minimal coordinates of the mesh vertices. It may or may not be one of the
   * mesh vertices. It is not especially if the computational domain has
   * curvilinear boundaries. In this case it's a smallest (with respect to
   * coordinates) point of the rectangle surrounding the domain.
   */
  Point2 _min_coord;

  /**
   * Maximal coordinates of the mesh vertices. It may or may not be one of the
   * mesh vertices. It is not especially if the computational domain has
   * curvilinear boundaries. In this case it's a biggest (with respect to
   * coordinates) point of the rectangle surrounding the domain.
   */
  Point2 _max_coord;

  std::vector<Point2> _vertices; ///< Mesh vertices
  std::vector<Triangle*> _elements; ///< Mesh elements

};



#endif // TRIANGULAR_MESH_HPP
